高并发
	- 网络层
		- 每一个请求web容器（Tomcat）都会分配一个线程。
		- 大量请求同时涌入会耗尽内存资源，造成宕机。
		- 所以每台服务器访问的数量是有限度的。
		- 可以通过tomcat限制访问数量。
		- 内存足够的情况下，受到带宽的限制，请求太多就会变卡顿。
		- 这个时候要部署多态服务器，做请求分发。
		- 至此，带宽问题和资源问题解决。
		- 进阶
			- 部署rabbitmq中间件服务器，将请求入栈储存，进行削峰。
			- 再由各个服务器消费消息，消化请求。
			- 部署redis服务器，将部分常用数据抽取，减少部分数据库读取需求。
		- 其他
			- 设置session服务器（redis）解决分布式问题。
			- 设置redis服务器解决分布式锁问题。
	- 代码层
		- 非秒杀但是需求耗时长的需求，可以使用线程处理。
		- 线程再用线程池处理，避免线程过多造成资源耗尽，以时间换空间。
		- 使用NIO处理长时间的连接，消耗比线程小。
		- NIO和BIO一样占用资源，但是BIO阻塞会一直占用，而NIO则不会，资源占用消耗都比较小。
	- 数据库
		- 分库分表
redis
	- 为什么快
		- 单线程，避免了多线程切换的开销（上下文切换）
		- 纯内存操作
	- 数据结构
		- SDS
			- free、len、buf
			- 记录未使用空间
			- 记录字符串长度，方便获取
			- 防止缓冲区溢出，空间不够会自动扩容
			- 自动分配未使用空间，减少分配内存次数
			- 回收字符串也会记录未使用空间而不是释放空间
			- 二进制安全
			- 兼容部分C字符串函数
		- Linked List
			- 双向链表
				- 包括表头节点指针、表尾节点指针、链表长度
			- 节点是listNode结构
		- Dict
			- hash表
				- 链表法解决冲突
			- 使用MurmurHash2算法计算哈希值
			- rehash
				- 扩容到2倍，并迁移数据
				- 扩展条件
					- 没有执行BGSAVE或者BGREWRITEAOF命令，且负载因子大于等于1
					- 正在执行BGSAVE或者BGREWRITEAOF命令，且负载因子大于等于5
					- 负载因子小于0.1
					- 负载因子 = 哈希表已保存节点数量/哈希表大小
			- 渐进式rehash
				- 分配一个扩容后的哈希表
				- 维持一个rehashindex，等于数据数，并随着操作递增
				- rehash期间对字段的增删改查操作会把操作的数据顺便复制到扩容的内存上
		- Skip List
			- 一种有序表
			- 平均查询O(logN)，最坏查询O(N)
			- 由zskiplist和zskiplistNode两个结构组成
				- zskiplist保存跳跃表信息
				- zskiplistNode表示跳跃表节点
			- 节点记录的层高是1-32之间的随机数
			- 多个节点可以包含相同分分值
		- 整数集合
			- 可以保存不同长度的整数类型
			- 当新元素的长度大于旧元素，旧元素的类型将升级，空间也扩容
			- 升级不可逆，保持灵活性，节约内存
		- 对象redisObject
			- 基础类型使用对象封装，再作为key对应的value储存
			- 对象保存着数据的类型和编码还有指针信息
			- 使用引用计数器实现内存自动回收
			- 通过引用计数器实现对象共享
			- lru属性记录最后一次被访问的时间(空转时长)，作为内存回收的依据
	- 数据库
		- RDB持久化
			- 记录所有数据的二进制文件
			- 可以用于宕机后的数据还原
			- 通过SAVE、BGSAVE命令创建
				- SAVE命令会阻塞服务器，BGSAVE会创建子线程
			- RDB文件会自动写入
		- AOF持久化
			- AOF记录的是操作的命令
			- AOF同步优先于RDB同步
			- 所有的命令会先写入aof_buf缓冲区，写满后一次性写入
			- 执行BGREWRITEAOF重写AOF命令，节省空间
	- 事务
		- MULTI、EXEC、WATCH
		- 有一个事务队列，按FIFO执行
		- WATCH是一个乐观锁，用以检测事务内的键是否改变
		- 事务不支持回滚
		- AOF模式下且开启appendfsync时才具有耐久性
	- 主要数据类型
		- string
		- hash
		- list
		- set
			- 进行并集操作
			- 利用交集求共同好友
			- 利用唯一性统计访问IP
			- 好友推荐
		- zset
			- 有序集合
	- 三大缓存问题
		- 缓存雪崩
			- 宕机或者key同一时间过期，大量请求涌入
			- 过期时间分布开
			- 使用缓存集群做到高可用
			- 使用hystrix做服务熔断
		- 缓存穿透
			- 某个key不存在一直在请求
			- 缓存空key
			- 过滤查询字段，使用布隆过滤器
		- 缓存击穿
			- 热点数据过期之后大量请求瞬间涌入
			- 设置热点数据永不过期
	- redis集群
		- redis至少需要3个master节点去构建集群
		- 一主一从需要
	- redis的持久化
		- RDB
			- RDB持久化方案是按照指定时间间隔对你的数据集生成的时间点快照
		- AOF
			- Redis数据修改的命令集合
			- 把操作命令存储下来
	- redisson
		- 分布式锁
			- 底层是rua脚本，判断是否存在这个加锁的key，如果不存在，通过hset命令加锁；
			- redisson锁会记录你操作的线程，如果非当前线程释放锁，会报错
			- redisson锁是可重入锁，会判断是否当前线程再次请求锁，但是锁的时间不叠加
		- 热点数据缓存，主键查询的单表数据缓存起来，迅速返回前端
锁
	- 公平锁
		- 每个线程都能拿到锁
	- 非公平锁
		- 不能保证每个线程都能拿到锁
	- 可重入锁
		- 在外面方法使用锁之后，在里面依然可以使用锁，并且不发生死锁
	- 死锁，两个线程互相等待对方释放锁
	- 分布式锁
	- 乐观锁
		- 默认数据不一定会改变
			- mysql update语句是乐观锁
			- 如果where条件有索引，锁行，否则锁表，但是都可以读
			- 读的时候又数据库版本，所以为了事务一致性，多线程需要先加redis锁，再去获取事务版本
		- 适合读多写少的场景
	- 悲观锁
		- 默认数据一定会改变
		- java的lock和synchronized锁都是悲观锁，必须先获取锁才能够读取数据
		- 适合写多读少的场景
	- 自旋锁
		- 由于线程挂起唤醒需要很大的开销，所以选择自旋等待锁，减少这部分的开销
		- redisson分布式锁是一种自旋锁
	- synchronized锁的原理
		- 对象头包括markwork字段、Class Pointer
		- markwork字段
		- 32位和64位的系统字段长度不同
		- 会记录轻量级锁00、重量级锁10、GC标记11、偏向锁01
		- 锁的状态通过Monitor监视器更新
		- 使用地方
			- 用在方法 synchronized void method()
			- 用在代码块 synchronized (this)
			- 用在类 synchronized (SynchronizeClassClass5.class)
		- 锁的升级
			- 有线程访问，通过CAS操作变成偏向锁（标志位置为01）
			- 另一个线程读取，会比较自身线程id和对象头中id是否一致
				- 一致的话直接获取锁（可重入）
				- 发现不一致就会去检测对象头中的线程是否存活，如存活升级为轻量级锁；
				- 线程去自旋获取轻量级锁
			- 自旋次数超过阈值，升级为重量级锁
	- 分布式锁
		- redis实现，创建锁缓存
		- zookeeper实现，依靠Znode
		- 数据库方式，创建锁表
事务
	- ACID
		- 原子性atomic
		- 一致性consistency
		- 隔离性isolation
		- 持久性dependency
	- @transitionnal标签失效的几种场景
		- 打了标签的方法没有被spring注入管理
		- 静态方法
		- 私有方法
		- 自己捕获了异常，没有往外抛
分布式事务
	- CAP，consistency、availability、partition tolerance
	- BASE，Basically Available Soft State Eventual Consistency
	- 两段式XA
		- 需要一个事务管理器
		- 会同步阻塞
		- 如果事务管理器故障，整个系统都不可用
		- 阶段二可能会发生故障，导致状态不一致
	- 三段式TCC
		- try
		- confirm
		- cancel
		- 引入超时概念解决同步阻塞问题
		- 不需要一个统一的事务管理器，由各方发起
		- 引入补偿机制解决最终一致性问题
	- 本地事务表
rocketmq
	- 基础
		- nameService
		- broker 
		- sequence
		- message
		- broker和sequence是多对多的关系
		- nameService负责负责负载均衡，对应多个broker
	- 数据结构
		- commitlog储存所有消息内容
			- 单个commitlog为1g大小，1073741824字节
			- 首个文件为00000000000000000000，第二个文件为00000000001073741824，以字节为名命名每一个commitlog文件
			- 消息内容按顺序储存在commitlog文件中
		- consumersequence是按topic、tag唯独储存的索引文件
			- consumersequence文件按topic/queueid/fileName的名字命名
			- 每个consumersequence文件固定20个字节，包括8个字节的commitlog物理偏移量、4字节的消息长度、8字节的tag hashcode
			- 查询的时候计算tag hashcode就可以快速定位到某一批consumersequence文件
			- 再按照它储存的commitlog偏移量和文件大小，就可以准确定位到某个commitlog文件，并读取到消息的内容
		- index实现了一个hash储存结构
			- index以创建时间命名
			- index固定长度储存，前40个长度为请求头header，储存了该文件的基本信息，中间4x500w个数据slot table是个链表，最后20x2000w数据为消息队列index linked list
			- index只能遍历查询，遍历某个key，按某种时间维度
	- rocketmq的偏移量管理
		- 如果上线了一个新的消费者，该从哪个消息开始消费？查询已消费过的consumer，将本地的偏移量发送到broker，避免新的消费者消费旧消息
	- 通信模式
		- 点对点
		- 订阅发布
	- MQ使用场景
		- 异步处理
		- 应用解耦
		- 流量削峰
			- 漏斗法
		- 消息通信
linux
	- socket
	- 用户态
	- 内核态
		- 阻塞进程
		- 非阻塞进程
		- IO多路复用
			- 一个请求就是一个socket，用户和内核之间通过socket去交互
			- IO多路复用指的是指单个进程/线程就可以同时处理多个IO请求
			- 用户将想要监视的文件描述符添加到select/poll/epoll函数中，由内核监视，函数阻塞。
			- 一旦有文件描述符就绪（读就绪或写就绪），或者超时（设置timeout），函数就会返回，然后该进程可以进行相应的读/写操作。
	- select、poll、epoll有什么区别
		- 都需要传递一份fd数组到内核中进行遍历（进行了拷贝）
		- select/poll
			- 通过轮询文件描述符确定是否已经就绪，所以不需要切换上下文
			- 返回轮询过的文件描述符给线程，线程需要再轮询一遍确定哪个描述符是就绪的
			- select最多只能处理1024个请求
			- poll没有1024个请求的限制
		- epoll
			- 在内存中会保存一份文件描述符集合，每次调用只传递新增的，而select则会全部传递，优化了这部分开销
			- 内核不再通过轮询的方式找到就绪的文件描述符，而是通过异步 IO 事件唤醒
			- 内核仅会将有 IO 事件的文件描述符返回给用户，用户也无需遍历整个文件描述符集合
	- linux的内存，cache、buffer、swag有什么区别
		- cache是内存中读完缓存起来的容量大小，为了调高CPU和内存之间数据交换
		- buffer是内存中写完缓存起来的容量大小，为了优化内存和硬盘之间的写操作，将写的操作集中起来进行，减少磁盘碎片和硬盘反复寻址过程，提高性能
			- 在Linux系统内部有一个守护进程会定期清空Buffer中的内容
		- swap是硬盘上交换分区的使用大小，为了当cache和buffer都用完之后还有新的请求到来时，可以把内存中的数据直接写入到磁盘中，把部分磁盘空间当做内存来使用
java
	- 三大特征
		- 封装，屏蔽细节、提供统一服务、较少耦合、提高可用性
		- 继承
		- 多态，继承、重写、上转型
	- String
		- 不可变的好处
			- hash值也不可变
			- 线程安全
		- StringBuilder非线程安全
		- StringBuffer线程安全，使用synchronized同步
		- 使用 String.intern() 可以保证相同内容的字符串变量引用同一的内存对象
	- 线程
		- 为什么需要多线程
			- CPU性能远高于内存
			- CPU有缓存，以均衡与内存的速度差异
			- 在CPU计算完，等待写回内存时，CPU是空闲的，多线程可以挂起，分时复用CPU
		- volatile
			- 保证变量在所有线程中是一致的，保证可见性
				- 线程会申请工作内存，但是不会实时刷新回主内存，使用该指令让每次读取变量的时候都去主内存同步一次
			- 禁止CPU指令重排序优化，保证程序执行顺序
			- volatile不具备原子性，不可解决并发问题
		- 线程状态
			- new 新建
			- runnable 运行
			- waiting 无限期等待
				- Object.wait()、Theard.join()、LockSupport.park()会导致进入这种状态
				- 无法被唤醒
			- timed waiting 限期等待
				- Thread.sleep()、Object.wait(100)、Thread.join(100)、LockSupport.parkNanos()、LockSupport.parkUntil会进入
				- 由处理器定期唤醒
			- Blocker 阻塞
				- 线程锁竞争产生，由锁释放引起唤醒
				- 或由线程进入同步区域（垃圾回收）时产生
			- Terminated 已终止
	- NIO
	- 泛型
		- 泛型擦除
	- 双亲委派
		- bootstrapClassLoader
			- 所有java.*的类都被此加载器加载
		- ExtClassloader
			- 责加载JDK\jre\lib\ext目录中的文件
		- appClassloader
		- 可以使用Class.forName实现动态加载class文件
	- JMM
		- 主内存
		- 工作内存
	- jvm
		- 内存划分
			- 程序计数器
				- 程序计数器不会发生OOM
			- 虚拟机栈
				- 由栈帧组成，每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息
			- 本地方法栈
				- 负责执行native方法
			- 方法区
				- 用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据
				- 运行时常量池
					- 储的主要是编译期间生成的字面量、符号引用，还有符号引用转换成的直接引用
					- 具有动态性，可以在运行期间加入新的常量
					- 符号引用指的是当类加载时，不知道被引用类的具体地址，所采用的一个引用，之后会转换成实际引用
			- 直接内存
				- NIO可以使用native函数直接分配堆外内存
			- 堆
				- 多线程共享堆空间
		- 内存溢出
			- 堆溢出OutOfMemoryError，对象过多且被引用（可达性分析不可剔除）、申请的线程过多
			- 栈溢出StackOverflowError，申请的常量过多
		- 对象
			- 对象创建内存分配
				- 指针碰撞分配
					- 需要堆空间规整，即需要垃圾收集器带有空间压缩整理能力
					- 将堆分成使用和空闲的两部分，通过挪动指针分配空间
					- 已用区域随着垃圾收集会出现大量碎片空间
						- 建立一个freeList（空间列表）将碎片空间记录下来，下次分配优先便利list进行分配
					- 可能存在并发，将已分配的空间再次分配
						- 方法一采用CAS配上失败重试的方法保证原子性
						- 方法二采用本地线程分配缓冲（TLAB）法，优先在线程本地内存中分配内存，防止并发（用完了继续分配）；
			- 对象头Mark Word
				- 锁的标志位
					- 01未锁定、00轻量级锁、10重量级锁、11 GC标记、01偏向锁
			- 实例数据
			- 对齐填充
		- 垃圾回收算法
			- 如何判断是否可以回收
				- 引用计数算法
					- 无法解决循环引用的问题
				- 可达性分析算法
					- OopMap
					- 三色标记法
			- 标记-清除
				- 标记和清除两个动作会随着对象数量增长而指数降低
				- 清除后内存空间碎片化
				- 清除后碎片空间不足以分配大内存需再次进行清理
			- 标记-复制
				- 半区复制
					- 保留一半区域，清理时候将存活对象复制到另一半区，清除整块片区
				- Eden-Survivor
					- 默认绝大部分内存活不到下一次清理的时间
					- 按8：1的比例划分一块Eden区和两块Survivor区
					- 清理时将Eden和Survivor区存活的对象复制到另一块Survivor区，清除其他两块区域
					- 若Survivor区空间不足，会调用Eden区域做暂时的分配
			- 标记-整理
				- 标记存活对象，将对象移动到一端，清理边界外所有空间
				- 移动会导致JVM停止（所有线程挂起）
			- G1垃圾回收器
				- 划分为Eden Reigon、
		- 内存分配
			- 对象优先在Eden分配
			- 当Eden区没有足够空间进行分配时，虚拟机将发起 一次Minor GC
			- 从Eden区到Survivor区：
				- Minor GC后还存活
				- 能被Survivor容纳
			- 大对象直接进入老年代
			- 长期存活的对象将进入老年代
				- 年龄增加到一定程度
				- 或在Survivor空间中相同年龄所有对象大小的总和大于 Survivor空间的一半
			- 老年代空间不足会产生full GC
			- 空间分配担保失败会产生ful GC
				- 每次晋升的对象的平均大小 > 老年代剩余空间
				- Minor GC后存活的对象超过了老年代剩余空间
spring
	- 控制反转(Inversion of Control)
		- 上古思想：接口驱动(Interface Driven Design)
			- 继承接口实现灵活
			- 缺点是带来了耦合关系，维护困难
		- 理论基础：依赖倒置原则
		- 具体实现：依赖注入(Dependency Injection)
			- 设值方法注入，通过JavaBean属性注射依赖关系
			- 构造器注入，将依赖关系作为构造函数参数传入
		- 作用
			- 松耦合，易维护
	- autowire和resource的区别
		- @Autowire是按照type来注解的
			- 所以使用此注释的对象名必须与类名一致
		- @Resource两种都可以，有name和type属性可以指定
	- starter是如何发挥作用的
		- SpringBoot启动时会自动搜索包含spring.factories文件的JAR包
		- 根据spring.factories文件加载自动配置类AutoConfiguration
		- 通过AutoConfiguration类，加载满足条件(@ConditionalOnXxx)的bean到Spring IOC容器中
		- 使用者可以直接使用自动加载到IOC的bean
	- spring配置加载顺序
		- 命令行参数。
		- 通过 System.getProperties() 获取的 Java 系统参数。
		- 操作系统环境变量。
		- 从 java:comp/env 得到的 JNDI 属性。
		- 通过 RandomValuePropertySource 生成的“random.*”属性。
		- 应用 Jar 文件之外的属性文件。(通过spring.config.location参数)
		- 应用 Jar 文件内部的属性文件。
		- 在应用配置 Java 类（包含“@Configuration”注解的 Java 类）中通过“@PropertySource”注解声明的属性文件。
		- 通过“SpringApplication.setDefaultProperties”声明的默认属性。
	- 三级缓存
		- singletonObjects(一级缓存)
			- 一级缓存存储就绪的bean
			- 一级缓存解决不了多线程下获取到半成品bean的问题
		- earlySingletonObjects(二级缓存)
			- 二级缓存储存初始化但未注入属性的bean
			- 二层缓存可以解决循环依赖的问题，但是解决不了切面执行的问题
		- singletonFactories(三级缓存)
			- 三级缓存预占暴露准备好的bean
	- 如何解决循环依赖问题
		- A->B->A
		- 先加载A
			- 依次判断(一级缓存)、(二级缓存)、(三级缓存)中是否有A
			- 没有就将A加入(三级缓存)
		- 发现A依赖B
			- 先加载B
			- 依次判断(一级缓存)、(二级缓存)、(三级缓存)中是否有B
			- 没有就将B加入(三级缓存)
			- 加载B的依赖
				- 发现依赖A
				- 依次从(一级缓存)、(二级缓存)、(三级缓存)中查找A，发现(三级缓存)有A
				- 将A上升到(二级缓存)中
				- 将A注入B的引用
			- 完成B的加载
			- 将B从(三级缓存)升级至(一级缓存)中
		- 继续加载A完成
		- 将A从(二级缓存)上升到(一级缓存)。
	- 如何控制bean加载顺序
		- @DependsOn注解用于声明当前bean依赖于另外一个bean
	- 代理
		- 静态代理
			- 使用代理类对原有类进行扩展
			- 每个类都需要一个代理类
		- JDK动态代理
			- 创建代理类，实现InvocationHandler接口，实现invoke方法
				- 配合注解可以实现通用代理类
			- 或者实现MethodInterceptor方法
		- Cglib代理
			- 依赖spring-core.jar
			- 来操作字节码生成新的类
			- 使用Enhancer类进行代理
			- 继承实现，无法代理final类
		- spring默认使用JDK代理，可以开启cglib代理
	- bean的生命周期
		- 实例化 Instantiation
		- 属性赋值 Populate
		- 初始化 Initialization
		- 销毁 Destruction
mysql
	- 日志
		- redo log
			- Redo Log 记录的是物理日志，也就是磁盘数据页的修改
			- 用来保证服务崩溃后，仍能把事务中变更的数据持久化到磁盘上
			- WAL（Write-Ahead Logging），预写日志，就是先写日志，再写磁盘
			- 使用日志缓存Redo Log Buffer解决写入磁盘随机IO效率低的问题
			- 操作系统调用fsync()操作刷到磁盘上
			- innodb_flush_log_at_trx_commit
				- 0（延迟写），提交事务后，不会立即刷到OS Buffer中，而是等一秒后刷新到OS Buffer并调用fsync()写入Redo Log FIle，可能会丢失一秒钟的数据
				- 1（实时写），每次提交事务，都会刷新到OS Buffer并调用fsync()写到Redo Log FIle，性能较差
				- 2（延迟刷新），每次提交事务只刷新到OS Buffer，一秒后再调用fsync()写入Redo Log FIle
			- 采用循环写入覆盖的方式
		- undo log
			- Undo Log记录的是逻辑日志，也就是SQL语句
			- 回滚事务时，恢复到修改前的数据
			- 实现 MVCC（多版本并发控制，Multi-Version Concurrency Control）
		- bin log
			- Bin Log记录的是逻辑日志，即原始的SQL语句
			- Bin Log采用追加写入的模式
			- Bin Log也是采用WAL模式，先写日志，再写磁盘
	- 如果命中唯一索引，锁行；命中普通索引，锁区间；不命中，锁表。
	- mysql如何进行多版本并发控制
		- 通过保存数据在某个时间点的快照来实现并发控制
		- 事务内部看到的数据是不受其它事务影响的
		- 通过比较版本号决定数据是否显示出来
		- 需要加锁，实现了非阻塞的读操作
	- 三大范式
		- 第一范式（1NF）用来确保每列的原子性，要求每列（或者每个属性值）都是不可再分的最小数据单元（也称为最小的原子单元）。
		- 第二范式（2NF）要求表中的每列都和主键相关，即要求实体的唯一性。如果一个表满足第一范式，并且除了主键以外的其他列全部都依赖于该主键，那么该表满足第二范式。
		- 第三范式（3NF）确保每列都和主键列直接相关，而不是间接相关，即限制列的冗余性。
		- 如果一个关系满足第二范式，并且除了主键以外的其他列都依赖于主键列，列和列之间不存在相互依赖关系，则满足第三范式。
	- acid
		- atomicity
			- 原子性，事务是最小的执行单位，不允许分割。原子性确保动作要么全部完成，要么完全不起作用
			- 通过undolog和MVCC实现
		- consistency
			- 一致性，执行事务前后，数据保持一致
			- 通过实现原子性、持久性和隔离性来保证一致性
		- isolation
			- 隔离性，并发访问数据库时，一个事务不被其他事务所干扰
			- 隔离级别
				- 读未提交 - 脏读	不可重复读	幻读
				- 读已提交 - 不可重复读	幻读
				- 可重复读 - 幻读
				- 串行化 - 锁表，不会出现问题
			- 三大并发问题
				- 脏读，指一个事务中访问到了另外一个事务未提交的数据
				- 不可重复读，一个事务读取同一条记录2次，得到的结果不一致
				- 幻读，一个事务读取2次，得到的记录条数不一致
			- 通过锁和MVVC实现
		- durability持久性，一个事务被提交之后。对数据库中数据的改变是持久的，即使数据库发生故障
			- 通过redolog实现
	- 索引
		- 普通索引
			- CREATE INDEX indexName ON table_name (column_name);
			- ALTER table tableName ADD INDEX indexName(columnName);
		- 唯一索引
			- 值不能重复
			- CREATE UNIQUE INDEX indexName ON table_name (column_name);
			- ALTER table tableName ADD UNIQUE INDEX indexName(columnName);
		- 主键索引
			- 只能有一个主键索引，可以有多个唯一索引
			- 唯一索引可以有一个空值，主键索引不允许有空值
		- 联合索引
			- CREATE INDEX indexName ON table_name (column_name1,column_name2);
			- ALTER table tableName ADD INDEX indexName(column_name1,column_name2);
		- 全文索引
			- create fulltext index content_tag_fulltext on fulltext_test(content,tag);
		- 索引使用B+Tree实现
		- 复合索引
		- 最左前缀匹配原则
			- 索引遇到范围查询(>、<、between、like)停止匹配
			- like不用全局模糊，只用XX%
		- 索引下推
		- 创建索引的条件
			- 频繁查询的字段
			- 外键关联字段（join）
			- order by、group by 的字段
		- 不应该创建索引的情况
			- 表数据太少
			- text字段
			- 频繁更新的表
			- 数据重复的表
	- 引擎
		- 查询命令 show engines;
		- MyISAM
			- 非事务，适合大量查询，支持全文索引
			- 表锁级别
			- 非聚簇索引
		- innodb
			- 支持事务，可以回滚
			- 行锁级别
			- 聚簇索引
	- 分库分表
		- IO瓶颈
			- 数据量太大，查询频繁，导致查询变慢
				- 适用分库和垂直分表
			- 请求太多，网络带宽不够
				- 使用分库
		- CPU瓶颈
			- SQL问题，进行SQL优化
			- 索引命中率低，做SQL优化或者把计算移植到业务层
			- 单表数据量太大
				- 查询的扫描的行太多，适用水平分表解决
		- 方案
			- 水平分库
				- 以字段为依据，按照一定策略将数据拆分到多个库中
				- 所有库都一样，数据不一样，全库并集是所有数据
			- 水平分表
				- 以字段为依据，按照一定策略将表数据拆分
			- 垂直分库
				- 按照业务将表分离到不同的库中
				- 每个服务有自己的库
				- 功能交互要尽量少，做到松耦合
				- 缺点
					- 无法实现复杂join，只能通过接口
					- 事务处理复杂
			- 垂直分表
				- 表中数据的查询量不同，有些数据常用，有些不常用
				- 拆分后字段少了，效率可以提升
		- 分库分表的共同问题
			- 引入分布式事务的问题
			- 跨节点Join的问题
			- 跨节点合并排序分页问题
			- 多数据源管理问题
	- SQL优化
		- 查询优化
			- 尽量使用索引
			- 使用on会造成全表扫描，可能不走索引，尽量使用union代替
			- 连续数字条件查询，尽量用between代替in
			- 查询条件使用表达式操作可能不走索引，比如 where age/2>10不走索引，where age>10走索引。
			- 进行函数操作也会不走索引
			- ab表查询，exist适合b表数据比a表大的情况，in相反
			- 索引最左前缀原则
			- 使用精确的匹配类型，比如varchar类型字段name的查询条件：name='3'比name=3的效果要好
			- 表字段长度要适当（尽量小）
			- 读写分离后，读表可以用MyISAM引擎，效率更好
		- 索引优化
			- 覆盖索引
				- 能只查主键就查主键，避免回表
				- 多用exist子查询
				- 查询值是复合索引字段
			- 普通索引
				- 尽量用普通索引替代唯一索引
			- 前缀索引
				- 身份证号用倒叙储存
			- 干净索引
				- 索引用了函数和计算就会失效
			- 扩展索引
				- 一个表最好不要超过 5 个索引
		  - SQL优化
			- order by优化
				- order by 后面的字段建立索引
				- select后面不要带上不必要的字段
				- 不要select *
			- join优化
				- 应用小表（数据量小的表）做驱动
				- 要利用被驱动表的索引
				- 利用临时表来作被驱动表
			- group by 优化
				- 尽量用索引
				- 使用SQL_BIG_RESULT 提示来优化大数据查询
			- or 优化
				- 在 Innodb 引擎下 or 关键字无法使用组合索引
				- 分别建立普通索引，查询后用UNION相连可解决
			- in 优化
				- in适合主表大字表小，exist适合主表小字表大
				- 有时候in改成join可以利用到索引
			- like 优化
				- 不用全局模糊
				- mysql全文检索不支持中文
		  - 数据表设计优化
			- 设置字段大小要慎重
			- 长度已知，用tinyint等代替int
			- 长度已知，用char代替varchar
			- 保证精度使用decimal
			- 日期用timestamp
			- 避免空值NULL，用空或者有意义的字段代替（NONE）
			- 过长字段用text
	- 5000万表多维度查询
	- 5000万表怎么用id和手机号码分表
	- 什么情况下触发索引
	- 什么情况下建立索引
	- 索引的命中率问题
nginx
	- 反向代理
		- nginx截取请求然后再分发到后台
	- 负载均衡 - upstream
		- 轮询法
		- 随机法
		- 加权轮询法 - weight
		- 加权随机法 - weight
		- 最小连接数法
信息安全
	- 网络攻击防范
		- csrf攻击
			- 盗用客户的cookie信息发送请求
			- 解决方法
				- 验证码
					- 适用性不强
				- performance check
					- 服务器不一定每次都能获取performance
				- NTCSI Token
					- 校验请求中的token
		- xss攻击
			- 配置filter过滤器，过滤敏感词
		- sql注入攻击
			- 配置filter过滤器，过滤敏感词
			- 禁用$符，使用#号
			- 使用prepareStatement